/* TRIALS */
func (app *App) test(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	app.Log.Println("Object:", vars["object"])
	http.ServeFile(w, r, staticLocation+"/html/"+vars["object"]+".html")
}

func (app *App) api(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	version := vars["version"]
	request := vars["request"]

	app.Log.Println("@api with version:", version, "and request:", request)

	switch version {
	default:
	case "v1":
		switch request {
		case "qTurHm":
			app.qTurHm(w, r)
		case "request":
			app.request(w, r)
		}
	}
}



func (app *App) qTurHm(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodGet {
		http.ServeFile(w, r, staticLocation+"/html/contactus.html")
	} else if r.Method == http.MethodPost {
		type Target struct {
			Top    int `json:"top"`
			Left   int `json:"left"`
			Width  int `json:"width"`
			Height int `json:"height"`
		}

		type Move struct {
			T int `json:"t"`
			X int `json:"x"`
			Y int `json:"y"`
		}

		type QTurHm struct {
			Key           string `json:"userkey"`
			TimeCreated   int    `json:"timestamp"`
			ResultContent string `json:"resultcontent"`
			URL           string `json:"origURL"`
			Mobile        bool   `json:"mobile"`
			Target        Target `json:"target"`
			Receiver      string `json:"receiver"`
			SampleCount   int    `json:"samples"`
			Moves         []Move `json:"moves"`
		}

		var q QTurHm

		// Try to decode the request body into the struct.
		err := json.NewDecoder(r.Body).Decode(&q)
		if err != nil {
			app.Log.Println("API error (qTurHm):", err.Error())
			return
		}

		app.Log.Printf("%v", q)
		app.Log.Printf("Key: %s Time: %d", q.Key, q.TimeCreated)
		rfn := q.Key + "_" + strconv.Itoa(q.TimeCreated)
		app.Log.Printf("Result File Name: %s should be: %s", rfn, q.ResultContent)

		res := []byte("8")
		werr := ioutil.WriteFile("/go/bin/data/qTurHm/"+rfn, res, 0644)
		if werr != nil {
			app.Log.Printf("Error writing result file /go/bin/data/qTurHm/%s: %v", rfn, werr)
		}
	}
}

func (app *App) request(w http.ResponseWriter, r *http.Request) {
	// Data - database structure */
	type Data struct {
		ReqType   string    `json:"reqtype"`
		ReqCmd    string    `json:"reqcmd"`
		Timestamp time.Time `json:"Timestamp"`
	}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		app.Log.Println("Error parsing Body:", err)
	}
	var data Data
	json.Unmarshal(reqBody, &data)
	data.Timestamp = time.Now()

	json.NewEncoder(w).Encode(data)

	app.Log.Printf("Request command received: %s", data.ReqType)
}



r.HandleFunc("/request", app.request).Methods("POST")
r.HandleFunc("/test/{object:[a-z]+}", app.test).Methods(http.MethodGet, http.MethodPost)
r.HandleFunc("/api/{version:[a-z0-9]+}/{request:[a-zA-Z]+}", app.api).Methods(http.MethodGet, http.MethodPost)
